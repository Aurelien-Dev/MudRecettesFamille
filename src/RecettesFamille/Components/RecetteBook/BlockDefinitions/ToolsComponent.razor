<!-- InstructionComponent.razor -->
@using RecettesFamille.Data.EntityModel
@using RecettesFamille.Managers

<div Class="relative pa-4 d-flex align-center">
    <MudSpeedDial Origin="Origin.CenterLeft" OpenOnHover="true" OpenOnClick="true" Color="Color.Primary" Size="Size.Small"
                  Icon="@Icons.Material.Filled.Add">
        <MudFab Size="Size.Small" IconSize="Size.Small" StartIcon="@Icons.Material.Filled.Image" OnClick="@(() => AddNewBlock<BlockImage>())" Color="Color.Secondary" />
        <MudFab Size="Size.Small" IconSize="Size.Small" StartIcon="@Icons.Material.Filled.Assignment" OnClick="@(() => AddNewBlock<BlockInstruction>())" Color="Color.Tertiary" />
        <MudFab Size="Size.Small" IconSize="Size.Small" StartIcon="@Icons.Material.Filled.FormatListBulleted" OnClick="@(() => AddNewBlock<BlockIngredientList>())" Color="Color.Primary" />
    </MudSpeedDial>
</div>


@code {
    [Parameter] public Action<BlockBase> AddBlockCallback { get; set; } = null!;
    [Parameter] public int? PrecedentIndex { get; set; } = null!;


    public void AddNewBlock<T>() where T: BlockBase, new()
    {
        BlockBase newBlock = Activator.CreateInstance<T>();
        newBlock.Order = PrecedentIndex.HasValue ? PrecedentIndex.Value + 1 : 0;

        if (PrecedentIndex.HasValue)
            newBlock.Order = PrecedentIndex.Value + 1;

        AddBlockCallback?.Invoke(newBlock);
    }
}