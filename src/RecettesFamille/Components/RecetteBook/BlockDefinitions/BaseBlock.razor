@using RecettesFamille.Data.EntityModel.RecipeSubEntity
@inherits BaseBlockDefinition<BlockBase>

@if (Block.HalfPage)
{
    md = 6;
}
else
{
    md = 12;
}

<MudItem xs="xs" md="md">
    <MudStack Row="true" StretchItems="StretchItems.Start">
        @switch (Block)
        {
            case BlockInstructionEntity instructionBlock:
                <InstructionComponent EditMode="EditMode" Block="instructionBlock" OnBlockUpdated="OnBlockUpdated" OnBlockDeleted="OnBlockDeleted" />
                break;
            case BlockIngredientListEntity ingredientListBlock:
                <IngredientComponent EditMode="EditMode" Block="ingredientListBlock" OnBlockUpdated="OnBlockUpdated" OnBlockDeleted="OnBlockDeleted" />
                break;
            case BlockImageEntity imageBlock:
                <ImageComponent EditMode="EditMode" Block="imageBlock" OnBlockUpdated="OnBlockUpdated" OnBlockDeleted="OnBlockDeleted" />
                break;

            // Ajoutez d'autres cas pour différents types de blocs ici
            default:
                <p>Type de bloc non pris en charge</p>
                break;
        }

        @if (EditMode)
        {
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Vertical="true" Size="Size.Small">
                <MudIconButton Class="@toolsPaddings" Icon="@Icons.Material.Filled.Delete" Color="@Color.Error" OnClick="OnBlockDelete" Size="Size.Small" />

                <MudToggleIconButton Class="@toolsPaddings" ToggledChanged="OnToggledChanged" Toggled="Block.HalfPage" Icon="@Icons.Material.Filled.Fullscreen" ToggledIcon="@Icons.Material.Filled.FullscreenExit" />

                <MudIconButton Class="@toolsPaddings" Icon="@Icons.Material.Filled.ArrowDropUp" OnClick="OnMoveUp"></MudIconButton>
                <MudIconButton Class="@toolsPaddings" Icon="@Icons.Material.Filled.ArrowDropDown" OnClick="OnMoveDown"></MudIconButton>
            </MudButtonGroup>
        }
    </MudStack>
</MudItem>
@code {
    [Inject] private IDialogService DialogService { get; set; } = null!;

    public int xs { get; set; } = 12;
    public int md { get; set; } = 12;

    private void OnMoveUp() => base.MoveUp?.Invoke(Block);
    private void OnMoveDown() => base.MoveDown?.Invoke(Block);

    const string toolsPaddings = "px-1 py-0";


    public void OnToggledChanged(bool toggled)
    {
        Block.HalfPage = toggled;
        OnBlockUpdated?.Invoke(Block);
    }

    private async Task OnBlockDelete()
    {
        bool? result = await DialogService.ShowMessageBox("Warning", "Deleting can not be undone!", yesText: "Delete!", cancelText: "Cancel");

        if (result is null)
            return;

        OnBlockDeleted?.Invoke(Block);
    }
}
