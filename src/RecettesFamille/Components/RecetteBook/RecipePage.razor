@page "/recette/{IdRecette:int?}"
@using RecettesFamille.Components.RecetteBook.BlockDefinitions
@using RecettesFamille.Data
@using RecettesFamille.Data.EntityModel
@using RecettesFamille.Data.EntityModel.RecipeSubEntity
@using RecettesFamille.Extensions
@using RecettesFamille.Managers

@if (Recette is not null)
{
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@Recette.Name</MudText>
    <MudText Typo="Typo.subtitle1" Align="Align.Center" GutterBottom="true">@Recette.InformationPreparation</MudText>

    <MudToolBar Class="justify-center mt-0 mb-0" >
        <MudToggleIconButton @bind-Toggled="editorMode" Icon="@Icons.Material.Outlined.Edit"
                             ToggledIcon="@Icons.Material.Filled.Edit" ToggledColor="@Color.Error" />
        <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever" OnClick="DeleteRecipe" />
    </MudToolBar>

    @* Description recette *@
    <MudGrid Spacing="5" Class="mt-0 mb-12">
        @foreach (var block in Recette.BlocksInstructions?.OrderBy(o => o.Order))
        {
            <BaseBlock EditMode="editorMode" Block="block"
                       OnBlockUpdated="OnBlockUpdated"
                       OnBlockDeleted="OnBlockDeleted"
                       OnBlockHasChanged="OnBlockHasChanged"
                       MoveUp="MoveUp"
                       MoveDown="MoveDown" />
        }

        @if (editorMode)
        {
            <ToolsComponent PrecedentIndex="@Recette.BlocksInstructions.Count" AddBlockCallback="AddNewBlock" />
        }
    </MudGrid>
}


@code {
    [Inject] GptRecipeConverterManager gptRecipeConverterManager { get; set; } = null!;
    [Inject] ApplicationDbContext dbContext { get; set; } = null!;
    [Inject] IDialogService dialogService { get; set; }
    [Inject] NavigationManager navigationManager { get; set; }

    [Parameter] public int IdRecette { get; set; }

    RecipeEntity? Recette { get; set; } = null!;
    public bool editorMode { get; set; } = false;

    protected async override Task OnParametersSetAsync()
    {
        Recette = await dbContext.Recettes.Include(s => s.BlocksInstructions)
                                                     .ThenInclude(b => (b as BlockIngredientListEntity).Ingredients)
                                                     .Where(r => r.Id == IdRecette)
                                                     .FirstOrDefaultAsync();
    }

    public async Task DeleteRecipe()
    {
        bool? result = await dialogService.ShowMessageBox("Warning", "Deleting can not be undone!", yesText: "Delete!", cancelText: "Cancel");

        if (result is null || (result.HasValue && !result.Value))
            return;

        if (Recette is null)
            return;

        dbContext.Recettes.Remove(Recette);
        await dbContext.SaveChangesAsync();

        navigationManager.NavigateTo("/");
    }

    #region Block edition
    private async Task OnBlockHasChanged()
    {
        StateHasChanged();
    }

    private async Task OnBlockDeleted(BlockBase block)
    {
        dbContext.Remove(block);
        await dbContext.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task OnBlockUpdated(BlockBase block)
    {
        dbContext.Update(block);
        await dbContext.SaveChangesAsync();
        StateHasChanged();
    }
    #endregion

    #region Block move
    private async Task MoveUp(BlockBase block)
    {
        Recette.BlocksInstructions.MoveUp<BlockBase>(block.Order);
        await UpdateOrder();
    }

    private async Task MoveDown(BlockBase block)
    {
        Recette.BlocksInstructions.MoveDown<BlockBase>(block.Order);
        await UpdateOrder();
    }

    private async Task UpdateOrder()
    {
        for (int i = 0; i < Recette.BlocksInstructions.Count; i++)
        {
            Recette.BlocksInstructions[i].Order = i;
        }
        await dbContext.SaveChangesAsync();
        StateHasChanged();
    }
    #endregion


    private async void AddNewBlock(BlockBase block)
    {
        // RÃ©ordonner les items de BlocksInstructions
        foreach (var item in Recette.BlocksInstructions.OrderBy(o => o.Order))
        {
            if (item.Order >= block.Order)
            {
                item.Order++;
            }
        }

        Recette.BlocksInstructions.Add(block);

        dbContext.Update(Recette);
        await dbContext.SaveChangesAsync();

        StateHasChanged();
    }
}