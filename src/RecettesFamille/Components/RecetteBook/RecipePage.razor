@page "/recette/{IdRecette:int?}"
@using RecettesFamille.Components.RecetteBook.BlockDefinitions
@using RecettesFamille.Data
@using RecettesFamille.Data.EntityModel
@using RecettesFamille.Data.EntityModel.RecipeSubEntity
@using RecettesFamille.Managers

@if (Recette is not null)
{

    @if (editorMode)
    {
        <MudTextField @bind-Value="@Recette.Name" Typo="Typo.h3" T="string" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="@Recette.InformationPreparation" T="string" Variant="Variant.Outlined" />
    }
    else
    {
        <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@Recette.Name</MudText>
        <MudText Typo="Typo.subtitle1" Align="Align.Center" GutterBottom="true">@Recette.InformationPreparation</MudText>
    }


    <MudToolBar Class="justify-center">
        <MudIconButton Icon="@Icons.Material.Outlined.Add" />
        <MudToggleIconButton @bind-Toggled="editorMode" Icon="@Icons.Material.Outlined.Edit"
                             ToggledIcon="@Icons.Material.Filled.Edit" ToggledColor="@Color.Error" />
        <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever" />
    </MudToolBar>
    @* Description recette *@
    <MudGrid Spacing="5" Class="mt-10">
        @foreach (var block in Recette.BlocksInstructions?.OrderBy(o => o.Order))
        {
            @switch (block)
            {
                case BlockInstructionEntity instructionBlock:
                    <MudItem xs="12" md="12">
                        <InstructionComponent EditMode="editorMode" Block="instructionBlock" OnBlockUpdated="OnBlockUpdated" OnBlockDeleted="OnBlockDeleted" />

                    </MudItem>
                    break;
                case BlockIngredientListEntity ingredientListBlock:
                    <MudItem xs="12" md="5">
                        <IngredientComponent EditMode="editorMode" Block="ingredientListBlock" OnBlockUpdated="OnBlockUpdated" OnBlockDeleted="OnBlockDeleted" />
                    </MudItem>
                    break;
                case BlockImageEntity imageBlock:
                    <MudItem xs="12" md="5">
                        <ImageComponent EditMode="editorMode" Block="imageBlock" OnBlockUpdated="OnBlockUpdated" OnBlockDeleted="OnBlockDeleted" />
                    </MudItem>
                    break;

                // Ajoutez d'autres cas pour différents types de blocs ici
                default:
                    <MudItem xs="5">
                        <p>Type de bloc non pris en charge</p>
                    </MudItem>
                    break;
            }

            @*    <div Class="absolute pa-4 d-flex align-center justify-center">
    <MudItem xs="5">
    <ToolsComponent AddBlockCallback="AddNewBlock" PrecedentIndex="@block.Order" />
    </MudItem>
    </div> *@

        }
    </MudGrid>
}


@code {
    [Inject] GptRecipeConverterManager gptRecipeConverterManager { get; set; } = null!;
    [Inject] ApplicationDbContext dbContext { get; set; } = null!;

    [Parameter] public int IdRecette { get; set; }

    RecipeEntity? Recette { get; set; } = null!;
    public bool editorMode { get; set; } = false;

    protected async override Task OnParametersSetAsync()
    {
        Recette = await dbContext.Recettes.Include(s => s.BlocksInstructions)
                                                     .ThenInclude(b => (b as BlockIngredientListEntity).Ingredients)
                                                     .Where(r => r.Id == IdRecette)
                                                     .FirstOrDefaultAsync();
    }


    private async Task OnBlockDeleted(BlockBase s)
    {
        dbContext.Remove(s);
        await dbContext.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task OnBlockUpdated(BlockBase s)
    {
        dbContext.Update(s);
        await dbContext.SaveChangesAsync();
    }

    private void AddNewBlock(BlockBase block)
    {
        // Réordonner les items de BlocksInstructions
        foreach (var item in Recette.BlocksInstructions.OrderBy(o => o.Order))
        {
            if (item.Order >= block.Order)
            {
                item.Order++;
            }
        }

        Recette.BlocksInstructions.Add(block);
        StateHasChanged();
    }
}