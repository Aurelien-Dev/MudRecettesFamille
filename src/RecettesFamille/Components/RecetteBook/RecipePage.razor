@page "/recette/{IdRecette:int?}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using RecettesFamille.Components.RecetteBook.BlockDefinitions
@using RecettesFamille.Data
@using RecettesFamille.Data.EntityModel
@using RecettesFamille.Managers
@using System.Text.Json
@using System.Text.Json.Serialization.Metadata

@if (Recette is not null)
{
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@Recette.Name</MudText>
    <MudText Typo="Typo.subtitle1" Align="Align.Center" GutterBottom="true">@Recette.InformationPreparation</MudText>
    @* <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateRecipe">Update...</MudButton> *@

    @* Description recette *@
    <MudGrid Spacing="5" Class="mt-10">
        @foreach (var block in Recette.BlocksInstructions?.OrderBy(o => o.Order))
        {
            @switch (block)
            {
                case BlockInstruction instructionBlock:
                    <MudItem xs="12" md="12">
                        <InstructionComponent Block="instructionBlock" />
                    </MudItem>
                    break;
                case BlockIngredientList ingredientListBlock:
                    <MudItem xs="12" md="5">
                        <IngredientComponent Block="ingredientListBlock" />
                    </MudItem>
                    break;
                case BlockImage imageBlock:
                    <MudItem xs="12" md="5">
                        <ImageComponent Block="imageBlock" />
                    </MudItem>
                    break;

                // Ajoutez d'autres cas pour différents types de blocs ici
                default:
                    <MudItem xs="5">
                        <p>Type de bloc non pris en charge</p>
                    </MudItem>
                    break;
            }

            @* <MudItem xs="5">
                <ToolsComponent AddBlockCallback="AddNewBlock" PrecedentIndex="@block.Order" />
            </MudItem> *@
        }
    </MudGrid>
}


@code {
    [Inject] GptRecipeConverterManager gptRecipeConverterManager { get; set; } = null!;
    [Inject] ApplicationDbContext applicationDbContext { get; set; } = null!;

    [Parameter] public int IdRecette { get; set; }

    RecetteEntity? Recette { get; set; } = null!;

    protected async override Task OnParametersSetAsync()
    {
        Recette = await applicationDbContext.Recettes.Include(s => s.BlocksInstructions)
                                                     .ThenInclude(b => (b as BlockIngredientList).Ingredients)
                                                     .Where(r => r.Id == IdRecette)
                                                     .FirstOrDefaultAsync();
    }

    public async Task UpdateRecipe()
    {
        // (RecetteEntity recette, decimal cost) = await gptRecipeConverterManager.GenerateDescription();

        applicationDbContext.Recettes.Update(Recette);
        await applicationDbContext.SaveChangesAsync();
    }

    private void AddNewBlock(BlockBase block)
    {
        // Réordonner les items de BlocksInstructions
        foreach (var item in Recette.BlocksInstructions.OrderBy(o => o.Order))
        {
            if (item.Order >= block.Order)
            {
                item.Order++;
            }
        }

        Recette.BlocksInstructions.Add(block);
        StateHasChanged();
    }
}