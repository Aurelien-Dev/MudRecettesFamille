@page "/recette/{IdRecette:int?}"
@using RecettesFamille.Components.RecetteBook.BlockDefinitions
@using RecettesFamille.Data
@using RecettesFamille.Data.EntityModel
@using RecettesFamille.Data.EntityModel.RecipeSubEntity
@using RecettesFamille.Managers

@if (Recette is not null)
{
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@Recette.Name</MudText>
    <MudText Typo="Typo.subtitle1" Align="Align.Center" GutterBottom="true">@Recette.InformationPreparation</MudText>

    <MudToolBar Class="justify-center">
        <MudIconButton Icon="@Icons.Material.Outlined.Add" />
        <MudToggleIconButton @bind-Toggled="editorMode" Icon="@Icons.Material.Outlined.Edit"
                             ToggledIcon="@Icons.Material.Filled.Edit" ToggledColor="@Color.Error" />
        <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever" />
    </MudToolBar>
    @* Description recette *@
    <MudGrid Spacing="5" Class="mt-10 mb-12">
        @foreach (var block in Recette.BlocksInstructions?.OrderBy(o => o.Order))
        {
            <BaseBlock EditMode="editorMode" Block="block" OnBlockUpdated="OnBlockUpdated" OnBlockDeleted="OnBlockDeleted" OnBlockHasChanged="OnBlockHasChanged" />
        }
    </MudGrid>
}


@code {
    [Inject] GptRecipeConverterManager gptRecipeConverterManager { get; set; } = null!;
    [Inject] ApplicationDbContext dbContext { get; set; } = null!;

    [Parameter] public int IdRecette { get; set; }

    RecipeEntity? Recette { get; set; } = null!;
    public bool editorMode { get; set; } = false;

    protected async override Task OnParametersSetAsync()
    {
        Recette = await dbContext.Recettes.Include(s => s.BlocksInstructions)
                                                     .ThenInclude(b => (b as BlockIngredientListEntity).Ingredients)
                                                     .Where(r => r.Id == IdRecette)
                                                     .FirstOrDefaultAsync();
    }
    

    private async Task OnBlockHasChanged()
    {
        StateHasChanged();
    }

    private async Task OnBlockDeleted(BlockBase block)
    {
        dbContext.Remove(block);
        await dbContext.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task OnBlockUpdated(BlockBase block)
    {
        dbContext.Update(block);
        await dbContext.SaveChangesAsync();
        StateHasChanged();
    }

    // private void MoveBlock(BlockBase block)
    // {
    //     block.Order = --block.Order;

    //     // Réordonner les items de BlocksInstructions
    //     foreach (var item in Recette.BlocksInstructions.OrderBy(o => o.Order))
    //     {
    //         if (item.Order >= block.Order)
    //         {
    //             item.Order++;
    //         }
    //     }
    // }

    private void AddNewBlock(BlockBase block)
    {
        // Réordonner les items de BlocksInstructions
        foreach (var item in Recette.BlocksInstructions.OrderBy(o => o.Order))
        {
            if (item.Order >= block.Order)
            {
                item.Order++;
            }
        }

        Recette.BlocksInstructions.Add(block);
        StateHasChanged();
    }
}