@using BitzArt.Blazor.Cookies
@using Blazored.LocalStorage
@using RecettesFamille.Managers
@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider" IsDarkMode="isDarkMode" Theme="CustomThemeManager.Customtheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
        <MudText Typo="Typo.body1" Style="font-weight: bold;" Class="ml-3">Recettes famille</MudText>
        <MudSpacer />
        <MudToggleIconButton ToggledChanged="OnToggledChanged"
                             Icon="@Icons.Material.Outlined.DarkMode"
                             ToggledIcon="@Icons.Material.Filled.LightMode"
                             ToggledColor="@Color.Error" />

    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="mt-12 pa-4">
        <MudContainer MaxWidth="MaxWidth.Large">
            <CustomErrorBoundary>
                @Body
            </CustomErrorBoundary>

        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = null!;
    [Inject] private ICookieService CookieService { get; set; } = null!;

    private bool _drawerOpen = true;
    private bool isDarkMode = false;
    private MudThemeProvider _mudThemeProvider;

    protected async override Task OnInitializedAsync()
    {
        var cookie = await CookieService.GetAsync("userPreferenceDarkMode");
        bool? userPreferenceDarkMode = bool.TryParse(cookie?.Value, out var result) && result;

        isDarkMode = userPreferenceDarkMode ?? await _mudThemeProvider.GetSystemPreference();
    }

    private async Task OnToggledChanged(bool isDark)
    {
        isDarkMode = isDark;
        await CookieService.SetAsync("userPreferenceDarkMode", isDark.ToString(), new DateTimeOffset(DateTime.MaxValue));
        StateHasChanged();
    }

    private void DrawerToggle()
    {

        _drawerOpen = !_drawerOpen;
    }
}