@page "/admin/prompt"
@layout AdminLayout
@using System.Text
@using RecettesFamille.Components.Layout
@using RecettesFamille.Components.Pages.RecetteBook.BlockDefinitions
@using RecettesFamille.Data.Repository.IRepositories
@using RecettesFamille.Dto.Models
@using RecettesFamille.Dto.Models.Blocks
@using RecettesFamille.Extensions
@using RecettesFamille.Managers

<MudGrid>
    <MudItem xs="12" md="4">
        <MudList T="string">
            <MudListItem Text="Prompt list :" Disabled />

            @foreach (var item in Prompts)
            {
                <MudListItem Dense="true" Text="@item.Name" Icon="@Icons.Material.Filled.UploadFile" OnClick="@(() => ShowPrompt(item))" />
            }
            @{
                PromptDto? newPrompt = new() { Name = "NewPrompt" };
            }
            <MudListItem Dense="true" Text="@newPrompt.Name" Icon="@Icons.Material.Filled.NewLabel" OnClick="@(() => ShowPrompt(newPrompt))" />

        </MudList>
    </MudItem>
    <MudItem xs="12" md="8">
        <MudStack>
            <MudToggleIconButton @bind-Toggled="EditMode"
                                 Icon="@Icons.Material.Filled.Edit"
                                 Color="@Color.Success"
                                 ToggledIcon="@Icons.Material.Filled.Edit"
                                 ToggledColor="@Color.Error" />
            @if (!EditMode)
            {
                <MudText Typo="Typo.h3" GutterBottom="true">@CurrentPrompt.Name</MudText>
                <MudMarkdown Value="@CurrentPrompt.Prompt" />
            }
            else
            {
                <MudButton Variant="Variant.Filled" OnClick="SavePrompt">Save</MudButton>
                <MudTextField T="string" Label="Prompt name" Variant="Variant.Outlined" @bind-Value="CurrentPrompt.Name" />
                <MudTextField T="string" Label="@CurrentPrompt.Name" Variant="Variant.Outlined" Lines="30"
                              @bind-Value="CurrentPrompt.Prompt" />
            }
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    [Inject] IAiRepository AiRepository { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;

    private List<PromptDto> Prompts { get; set; } = [];

    private PromptDto? CurrentPrompt { get; set; } = new();
    private bool EditMode { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Load();
            StateHasChanged();
        }
    }

    private async Task Load()
    {
        Prompts = await AiRepository.GetPrompt();
    }

    public async Task SavePrompt()
    {
        if (CurrentPrompt is { Id: not null })
            await AiRepository.UpdatePrompt(CurrentPrompt);
        else
            await AiRepository.AddPrompt(CurrentPrompt);

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("SaveChanges OK.", Severity.Success);

        await Load();
        StateHasChanged();
    }

    private void ShowPrompt(PromptDto? promptEntity)
    {
        CurrentPrompt = promptEntity;
    }
}