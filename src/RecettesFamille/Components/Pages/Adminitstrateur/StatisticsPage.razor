@page "/admin/statistics"
@using RecettesFamille.Components.Layout
@using RecettesFamille.Data.Repository.IRepositories
@using RecettesFamille.Data.Repository.Repositories
@layout AdminLayout

<MudGrid>
    <MudItem xs="12">

        <MudText Typo="Typo.h5">Nombre de requête par jour et par models</MudText>
        <MudChart ChartType="ChartType.Line"
        ChartSeries="@_series"
        XAxisLabels="@_xAxisLabels"
        ChartOptions="@_options"
        Height="400" />
    </MudItem>
    <MudItem xs="12">

        <MudText Typo="Typo.h5">Token moyen par jour et par models</MudText>
        <MudChart ChartType="ChartType.Line"
        ChartSeries="@_seriesAvg"
        XAxisLabels="@_xAxisLabels"
        ChartOptions="@_options"
        Height="400" />
    </MudItem>

</MudGrid>

@code {
    [Inject] IStatisticRepository StatisticRepository { get; set; } = null!;

    private readonly ChartOptions _options = new();

    private List<ChartSeries> _series = [];
    private string[] _xAxisLabels = [];


    private List<ChartSeries> _seriesAvg = [];
    private string[] _xAxisLabelsAvg = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var query = await StatisticRepository.GetCountCallByDays();
        _xAxisLabels = query.Select(c => c.Date.ToShortDateString()).ToArray();
        _series =
        [
            new ChartSeries() { Name = "DeepSeek", Data = query.Where(c => c.AiModelName == "DeepSeek").Select(c => c.Calculate).ToArray() },
            new ChartSeries() { Name = "openai-gpt-4o", Data = query.Where(c => c.AiModelName == "openai-gpt-4o").Select(c => c.Calculate).ToArray() }
        ];

        var queryAvg = await StatisticRepository.GetAvgTokenByDays();
        _xAxisLabelsAvg = queryAvg.Select(c => c.Date.ToShortDateString()).ToArray();
        _seriesAvg =
        [
            new ChartSeries() { Name = "DeepSeek", Data = queryAvg.Where(c => c.AiModelName == "DeepSeek").Select(c => c.Calculate).ToArray() },
            new ChartSeries() { Name = "openai-gpt-4o", Data = queryAvg.Where(c => c.AiModelName == "openai-gpt-4o").Select(c => c.Calculate).ToArray() }
        ];
    }
}
