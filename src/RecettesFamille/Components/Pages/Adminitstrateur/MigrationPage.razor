@page "/admin/migrations"
@layout AdminLayout
@using System.Text
@using RecettesFamille.Components.Layout
@using RecettesFamille.Components.Pages.RecetteBook.BlockDefinitions
@using RecettesFamille.Data.Repository.IRepositories
@using RecettesFamille.Extensions
@using RecettesFamille.Managers

<MudStack Spacing="5">

    <MudDataGrid Items="FileInfos">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="FileName" />
            <TemplateColumn Title="Actions">
                <CellTemplate>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Download" OnClick="@(async () => await DownloadFile(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudButton Variant="Variant.Filled" OnClick="CreateBackup">Create a backup</MudButton>

</MudStack>

@code {
    [Inject] ITechnicalDbRepository TechnicalDbRepository { get; set; } = null!;
    [Inject] IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;
    [Inject] EmailManager EmailManager { get; set; } = null!;

    private List<FileInfo> FileInfos { get; set; } = [];

    protected override void OnInitialized()
    {
        ListFolder();
    }

    public async Task CreateBackup()
    {
        var (success, message, fileName) = TechnicalDbRepository.TriggerBackup();

        if (success)
            ListFolder();

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
        Snackbar.Add(message, success ? Severity.Info : Severity.Error);

        if (success)
            await EmailManager.SendEmailAsync($"Recette famille - DB Backup {DateTime.UtcNow.ToShortDateString()} {DateTime.UtcNow.ToShortTimeString()}", "Body", "Body html", [$"wwwroot/backups/{fileName}"]);
    }

    private async Task DownloadFile(FileInfo fileInfo)
    {
        var fileStream = new FileStream(fileInfo.FullName, FileMode.Open, FileAccess.Read);
        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileInfo.Name, streamRef);
    }

    private void ListFolder()
    {
        var folderPath = "wwwroot/backups/"; // Replace with the actual folder path

        if (!Directory.Exists(folderPath))
            Directory.CreateDirectory(folderPath);

        var files = Directory.GetFiles(folderPath);

        FileInfos = new List<FileInfo>();
        foreach (var file in files)
        {
            FileInfos.Add(new FileInfo(file));
        }
    }
}