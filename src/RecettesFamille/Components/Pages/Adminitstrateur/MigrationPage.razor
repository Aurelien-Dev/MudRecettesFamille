@page "/admin/migrations"
@layout AdminLayout
@using RecettesFamille.Components.Layout
@using RecettesFamille.Extensions
@using RecettesFamille.Components.Pages.RecetteBook.BlockDefinitions
@using RecettesFamille.Data
@using RecettesFamille.Data.EntityModel
@using RecettesFamille.Data.EntityModel.RecipeSubEntity
@using RecettesFamille.Managers
@using System.Text

<MudStack Spacing="5">

    <MudDataGrid Items="fileInfos">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="FileName" />
            <TemplateColumn Title="Actions">
                <CellTemplate>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Download" OnClick="@(async () => await DownloadFile(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudButton Variant="Variant.Filled" OnClick="CreateBackup">Create a backup</MudButton>

</MudStack>

@code {
    [Inject] ApplicationDbContext dbContext { get; set; } = null!;
    [Inject] IJSRuntime jSRuntime { get; set; } = null!;
    [Inject] ISnackbar snackbar { get; set; } = null!;


    private List<FileInfo> fileInfos { get; set; } = new List<FileInfo>();

    protected override void OnInitialized()
    {
        ListFolder();
    }

    public async Task CreateBackup()
    {
        (bool success, string message) = dbContext.TriggerBackup();

        if (success)
            ListFolder();

        snackbar.Clear();
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomEnd;
        snackbar.Add(message, success ? Severity.Info : Severity.Error);
    }

    public async Task DownloadFile(FileInfo fileInfo)
    {
        var fileStream = new FileStream(fileInfo.FullName, FileMode.Open, FileAccess.Read);
        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await jSRuntime.InvokeVoidAsync("downloadFileFromStream", fileInfo.Name, streamRef);
    }


    public void ListFolder()
    {
        var folderPath = "wwwroot/backups/"; // Replace with the actual folder path

        if (!Directory.Exists(folderPath))
            Directory.CreateDirectory(folderPath);

        var files = Directory.GetFiles(folderPath);

        fileInfos = new List<FileInfo>();
        foreach (var file in files)
        {
            fileInfos.Add(new FileInfo(file));
        }
    }

}