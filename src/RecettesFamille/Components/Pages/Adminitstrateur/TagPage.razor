@page "/admin/tag"
@attribute [Authorize(Roles = "Admin, Contributor")]

@using Microsoft.AspNetCore.Authorization
@using RecettesFamille.Components.Layout
@using RecettesFamille.Data.Repository.IRepositories
@using RecettesFamille.Dto.Models
@using RecettesFamille.Extensions
@layout AdminLayout

@inject ITagRepository TagRepository
@inject IRecipeRepository RecipeRepository
@inject IDialogService DialogService

<MudList T="TagDto" SelectionMode="SelectionMode.MultiSelection" Dense="true">
    <MudListSubheader>
        Tags à afficher dans la bar de recherche :
    </MudListSubheader>
    @foreach (var item in Tags.EmptyIfNull().OrderBy(c => c.TagName))
    {
        <MudStack Row="true">
            <MudCheckBox T="bool" Value="@item.IsVisible" ValueChanged="@(e => Callback(e, item))"
                         Size="Size.Small" Color="Color.Secondary">@item.TagName</MudCheckBox>

            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.DeleteSweep" OnClick="@(async () => await DeleteTagOnRecipe(item))" />
        </MudStack>
    }
</MudList>

<AuthorizeView Roles="Admin">
    <MudButton OnClick="PreloadTags">PreloadTags</MudButton>
</AuthorizeView>
@code {
    private List<TagDto>? Tags { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Tags = await TagRepository.GetAll();
    }

    private async Task PreloadTags()
    {
        var recipes = await RecipeRepository.GetAll();
        var strTags = new List<string>();

        foreach (var recipe in recipes)
        {
            strTags.AddRange(recipe.Tags.Split("|").ToList());
        }

        strTags = strTags.Distinct().ToList();
        var success = await TagRepository.AddTag(strTags.Select(c => new TagDto() { TagName = c }).ToArray());

        if (success)
            Tags = await TagRepository.GetAll();
    }

    public async Task DeleteTagOnRecipe(TagDto tag)
    {
        var result = await DialogService.ShowMessageBox("Avertissement", "La suppression supprimera le tag sur la recettes aussi et est irréversible !", yesText: "Supprimer !", cancelText: "Annuler");

        if (result is null)
            return;

        var success = await TagRepository.DeleteTagOnRecipe(tag);

        if (success)
        {
            Tags?.Remove(tag);
        }
    }

    private async Task Callback(bool b, TagDto item)
    {
        item.IsVisible = b;
        await TagRepository.UpdateTag(item);
    }
}
