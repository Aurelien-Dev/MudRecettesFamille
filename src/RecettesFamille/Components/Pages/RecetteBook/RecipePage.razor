@page "/recette/{IdRecette:int?}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using RecettesFamille.Components.Pages.RecetteBook.BlockDefinitions
@using RecettesFamille.Components.Pages.RecetteBook.Components
@using RecettesFamille.Data.Repository.IRepositories
@using RecettesFamille.Dto.Models
@using RecettesFamille.Dto.Models.Blocks
@using RecettesFamille.Extensions
@using RecettesFamille.Managers;
@using RecettesFamille.Managers.AiGenerators

@if (Recipe is not null)
{
    @if (EditorMode)
    {
        <MudTextField @bind-Value="Recipe.Name" Typo="Typo.h3" Style="font-weight: bold;" FullWidth="false" class="text-end" OnBlur="UpdateGeneralRecipeInformation" />
        @* <MudTextField @bind-Value="Recipe.InformationPreparation" Typo="Typo.subtitle1" FullWidth="false" class="text-end" OnBlur="UpdateGeneralRecipeInformation" /> *@
    }
    else
    {
        <RecipeHeader Recipe="Recipe" />
    }

    <AuthorizeView Roles="Admin, Contributor">
        <MudToolBar Class="justify-center mt-0 mb-0">
            <MudToggleIconButton @bind-Toggled="EditorMode" Icon="@Icons.Material.Outlined.Edit"
                                 ToggledIcon="@Icons.Material.Filled.Edit" ToggledColor="@Color.Error" />
            <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever" OnClick="DeleteRecipe" />
        </MudToolBar>
    </AuthorizeView>

    @* Description recette *@
    <MudGrid Spacing="5" Class="mt-0 mb-12">
        @foreach (var block in Recipe.BlocksInstructions.OrderBy(c => c.Order).EmptyIfNull())
        {
            <BaseBlock EditMode="EditorMode" Block="block"
                       OnBlockUpdated="OnBlockUpdated"
                       OnBlockDeleted="OnBlockDeleted"
                       OnBlockHasChanged="OnBlockHasChanged"
                       MoveUp="MoveUp"
                       MoveDown="MoveDown" />
        }

        @if (EditorMode)
        {
            <ToolsComponent PrecedentIndex="@(Recipe.BlocksInstructions.Count -1)" AddBlockCallback="AddNewBlock" />
        }
    </MudGrid>
}

<style>
    .text-end input {
        text-align: center !important;
    }
</style>

@code {
    [Inject] IRecipeRepository RecipeRepository { get; set; } = null!;
    [Inject] IDialogService DialogService { get; set; } = null!;
    [Inject] NavigationManager NavigationManager { get; set; } = null!;

    [Parameter] public int IdRecette { get; set; }

    RecipeDto? Recipe { get; set; }
    bool EditorMode { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Recipe = await RecipeRepository.GetWithInstructions(IdRecette);
    }

    public async Task DeleteRecipe()
    {
        var result = await DialogService.ShowMessageBox("Avertissement", "Supprimer cette recette, c'est comme jeter une pâte à pain levée… Impossible de revenir en arrière !", yesText: "Tout mettre à la poubelle !", cancelText: "Garder la recette");

        if (result is null || !result.Value)
            return;

        if (Recipe is null)
            return;

        await RecipeRepository.DeleteRecipe(IdRecette);

        NavigationManager.NavigateTo("/");
    }

    private async Task UpdateGeneralRecipeInformation()
    {
        if (Recipe is null)
            return;

        await RecipeRepository.UpdateRecipe(Recipe);

        StateHasChanged();
    }

    #region Block edition
    private Task OnBlockHasChanged()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnBlockDeleted(BlockBaseDto block)
    {
        var success = await RecipeRepository.DeleteBlock(block.Id!.Value);

        if (!success) return;

        Recipe!.BlocksInstructions.Remove(block);
        await RecipeRepository.UpdateRecipe(Recipe);
        Recipe.BlocksInstructions.Reorder();
        StateHasChanged();
    }

    private async Task OnBlockUpdated(BlockBaseDto? block)
    {
        await RecipeRepository.UpdateBlock(block);
        StateHasChanged();
    }

    private async Task AddNewBlock(BlockBaseDto block)
    {
        if (Recipe is null)
            return;

        block.RecipeId = Recipe.Id;
        var blockDto = await RecipeRepository.AddBlock(block);
        blockDto.Recipe = Recipe;
        Recipe.BlocksInstructions.Add(blockDto);
        Recipe.BlocksInstructions.Reorder();
        StateHasChanged();
    }
    #endregion

    #region Block move
    private async Task MoveUp(BlockBaseDto block)
    {
        if (Recipe is null)
            return;

        Recipe.BlocksInstructions.Reorder();
        Recipe.BlocksInstructions.MoveUp(block);
        await RecipeRepository.UpdateFullRecipe(Recipe);
        StateHasChanged();
    }

    private async Task MoveDown(BlockBaseDto block)
    {
        if (Recipe is null)
            return;

        Recipe.BlocksInstructions.Reorder();
        Recipe.BlocksInstructions.MoveDown(block);
        await RecipeRepository.UpdateFullRecipe(Recipe);
        StateHasChanged();
    }
    #endregion
}