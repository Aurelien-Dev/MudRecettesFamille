@using Cropper.Blazor.Extensions
@using Cropper.Blazor.Models
@using RecettesFamille.Components.Dialogs
@using Cropper.Blazor
@using RecettesFamille.Dto.Models.Blocks
@using RecettesFamille.Managers.AiGenerators
@inherits BaseBlockDefinition<BlockImageDto>

@if (EditMode)
{
    <MudGrid Spacing="2">
        <MudItem xs="12" md="4">
            <MudFileUpload @ref="mudFileUpload" T="IBrowserFile" FilesChanged="OnInputFileChanged">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" EndIcon="@Icons.Material.Filled.ImageSearch">
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Crop" OnClick="OpendCropDialog" FullWidth="true">
            </MudButton>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Outlined.AutoFixHigh" OnClick="AskImageToAi" FullWidth="true">
            </MudButton>
        </MudItem>
        <MudItem xs="12" md="12">
            <MudImage Src="@Block.Image" Fluid="false" ObjectFit="ObjectFit.Cover" Height="300" Elevation="25" Class="rounded-lg" Style="width:100%">
            </MudImage>
        </MudItem>
    </MudGrid>
}
else
{
    <MudImage Src="@Block.Image" Fluid="false" ObjectFit="ObjectFit.Cover" Height="300" Elevation="25" Class="rounded-lg">
    </MudImage>
}

@code {
    [Inject] ISnackbar snackbar { get; set; } = null!;
    [Inject] IDialogService DialogService { get; set; } = null!;
    [Inject(Key = "OpenAi")] IIaManagerBase iaManager { get; set; } = null!;

    private MudFileUpload<IBrowserFile> mudFileUpload { get; set; } = null!;
    private readonly long MaxFileSize = 1024 * 1024 * 15;

    private async Task OnInputFileChanged(IBrowserFile e)
    {
        try
        {
            if (e is null)
                return;

            string base64Image = await ConvertToBase64Async(e);
            Block.Image = base64Image;

            snackbar.Clear();
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            snackbar.Add("Image envoyé au serveur.", Severity.Success);

            OnBlockUpdated?.Invoke(Block);

            await mudFileUpload.ClearAsync();
            StateHasChanged();
        }
        catch (Exception)
        {
            snackbar.Clear();
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            snackbar.Add("Il y a eu une erreur.", Severity.Error);
            throw new Exception("Error uploading file");
        }
    }

    private async Task OpendCropDialog()
    {
        var parameters = new DialogParameters<CropDialog>
        {
            { x => x.ImageSource, Block.Image }
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<CropDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (result is null || result.Canceled)
            return;

        Block.Image = result.Data.ToString();
        OnBlockUpdated?.Invoke(Block);
        StateHasChanged();
    }

    private async Task AskImageToAi()
    {
        string base64Image = await iaManager.AskImage(Block.Recipe.Name);

        Block.Image = base64Image;
        StateHasChanged();
    }

    private async Task<string> ConvertToBase64Async(IBrowserFile file)
    {
        using var stream = file.OpenReadStream(MaxFileSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();
        return $"data:{file.ContentType};base64," + Convert.ToBase64String(bytes);
    }
}
