@using Cropper.Blazor.Extensions
@using Cropper.Blazor.Models
@using RecettesFamille.Components.Dialogs
@using Cropper.Blazor
@using RecettesFamille.Dto.Models.Blocks
@using RecettesFamille.Managers
@using RecettesFamille.Managers.AiGenerators
@using ImageMagick
@inherits BaseBlockDefinition<BlockImageDto>

@if (EditMode)
{
    <MudGrid Spacing="2">
        <MudItem xs="12" md="4">
            <MudFileUpload @ref="MudFileUpload" T="IBrowserFile" FilesChanged="OnInputFileChanged">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" EndIcon="@Icons.Material.Filled.ImageSearch">
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Crop" OnClick="OpenCropDialog" FullWidth="true">
            </MudButton>
        </MudItem>
        <MudItem xs="12" md="4">
            @if (_isWorkInProgress)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error" EndIcon="@Icons.Material.Outlined.Stop" OnClick="StopAskImageToAi" FullWidth="true">
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Outlined.AutoFixHigh" OnClick="AskImageToAi" FullWidth="true">
                </MudButton>
            }
        </MudItem>
        <MudItem xs="12" md="12" Style="position: relative;">
            <MudOverlay Visible="@_isWorkInProgress" DarkBackground="true" Absolute="true" Class="ml-2 mt-2 mb-1 rounded-lg">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </MudOverlay>

            <MudImage Src="@(Block.Image != null ? Block.Image.ToImageSrc() : "empty.png")" Fluid="false" ObjectFit="ObjectFit.Cover" Height="350" Elevation="25" Class="rounded-lg" Style="@($"width:100%;{ClassImage}")">
            </MudImage>
        </MudItem>
    </MudGrid>
}
else
{
    <MudImage Src="@(Block.Image != null ? Block.Image.ToImageSrc() : "empty.png")" Fluid="false" ObjectFit="ObjectFit.Cover" Height="350" Elevation="25" Class="rounded-lg" Style="@($"width:100%;{ClassImage}")">
    </MudImage>
}

@code {
    [Inject] IDialogService DialogService { get; set; } = null!;
    [Inject] IAiManager IaManager { get; set; } = null!;
    [Inject] ErrorManager ErrorManager { get; set; } = null!;

    private MudFileUpload<IBrowserFile> MudFileUpload { get; set; } = null!;
    private readonly long _maxFileSize = 1024 * 1024 * 15;
    private bool _isWorkInProgress;
    private CancellationTokenSource _cancellationTokenSource = null!;
    private string ClassImage => Block.Image == null ? "opacity: 0.23;" : string.Empty;

    private async Task OnInputFileChanged(IBrowserFile e)
    {
        try
        {
            var imageBytes = await ConvertToByteArrayAsync(e);
            var compressedImageBytes = imageBytes.CompressImage();

            await OpenCropDialogWithImage(compressedImageBytes);

            ErrorManager.DisplaySuccess("Image envoyé au serveur.");
            OnBlockUpdated?.Invoke(Block);
            StateHasChanged();
        }
        catch (Exception)
        {
            ErrorManager.DisplayError();
        }
    }

    private async Task OpenCropDialog()
    {
        if (Block.Image is null || Block.Image.Count() == 0)
        {
            ErrorManager.DisplayError("No image to crop.");
            return;
        }

        await OpenCropDialogWithImage(Block.Image);
    }

    private async Task AskImageToAi()
    {
        try
        {
            _cancellationTokenSource = new();

            _isWorkInProgress = true;
            var base64Image = await IaManager.AskImage(Block.Recipe.Id, includeFullRecipe: true, _cancellationTokenSource.Token);
            _isWorkInProgress = false;

            var base64Data = base64Image.Substring(base64Image.IndexOf(",") + 1);
            byte[] imageBytes = Convert.FromBase64String(base64Data);
            imageBytes = imageBytes.CompressImage();

            await OpenCropDialogWithImage(imageBytes);

            OnBlockUpdated?.Invoke(Block);
            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
            // Handle cancellation
        }
        catch (Exception)
        {
            ErrorManager.DisplayError();
        }
        finally
        {
            _isWorkInProgress = false;
            _cancellationTokenSource.Dispose();
        }
    }

    private async Task OpenCropDialogWithImage(byte[] imageBytes)
    {
        var parameters = new DialogParameters<CropDialog>
        {
            { x => x.ImageSource, imageBytes }
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<CropDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (result is null || result.Canceled)
            return;

        Block.Image = result.Data as byte[] ?? Array.Empty<byte>();
    }

    private void StopAskImageToAi()
    {
        _cancellationTokenSource?.Cancel();
    }

    private async Task<byte[]> ConvertToByteArrayAsync(IBrowserFile file)
    {
        await using var stream = file.OpenReadStream(_maxFileSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        return memoryStream.ToArray();
    }
}
