@using RecettesFamille.Components.Dialogs
@using RecettesFamille.Data.Repository.IRepositories
@using RecettesFamille.Dto.Models.Blocks
@using RecettesFamille.Services
@inherits BaseBlockDefinition<BlockIngredientListDto>

@inject IRecipeRepository RecipeRepository
@inject IDialogService DialogService

<MudDataGrid @ref="_dataGrid" Items="@Block.Ingredients.OrderBy(i => i.Order)" T="IngredientDto" Dense="true" Hover="true" Striped="false" Class="mx-3 mb-2 rounded-lg"
             HeaderClass="hide-header" Style="height:100%" RowClass="mud-table-extra-dense" ReadOnly="false" Outlined="false" Bordered="false" Breakpoint="Breakpoint.None"
             EditMode="DataGridEditMode.Form" edit EditTrigger="DataGridEditTrigger.Manual"
             CommittedItemChanges="@CommittedItemChanges">
    <ToolBarContent>
        @if (EditMode)
        {
            <MudTextField @bind-Value="Block.Name" Margin="Margin.Dense" Typo="Typo.h6" OnBlur="OnNameUpdated" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="OpenDialogNewItem" />
        }
        else
        {
            <MudText Typo="Typo.h6">@Block.Name</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Calculate" Size="Size.Small" OnClick="OpenRecalculateIngredientListDialog" />
        }
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Name" Editable="true" />
        <PropertyColumn Property="x => x.Quantity" Editable="true" Required="false" />
        <TemplateColumn Hidden="!EditMode" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row="true" Spacing="0" AlignItems="AlignItems.End">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    <MudToggleIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" ToggledIcon="@Icons.Material.Filled.Check" Color="Color.Error" ToggledColor="Color.Warning" ToggledChanged="@(async (b) => await ToggleChanged(b, context.Item))" />

                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ArrowDropUp" OnClick="@(() => MoveUp(context.Item))" />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ArrowDropDown" OnClick="@(() => MoveDown(context.Item))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<style>
    .hide-header {
        display: none !important;
    }

</style>

@code {
    MudDataGrid<IngredientDto> _dataGrid = null!;

    public void OnNameUpdated()
    {
        OnBlockUpdated?.Invoke(Block);
    }

    private async Task ToggleChanged(bool value, IngredientDto ingredientEntity)
    {
        if (value)
            return;

        var success = await RecipeRepository.DeleteIngredient(ingredientEntity.Id!.Value);

        if (!success) return;

        Block.Ingredients.Remove(ingredientEntity);
        StateHasChanged();
    }

    public async Task OpenDialogNewItem()
    {
        await _dataGrid.SetEditingItemAsync(new IngredientDto());
    }

    public async Task OpenRecalculateIngredientListDialog()
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };
        var parameters = new DialogParameters<RecalculateIngredientListDialog>
        {
            { v => v.blockIngredientList, Block}
        };
        var dialog = await DialogService.ShowAsync<RecalculateIngredientListDialog>("Delete", parameters, options);

    }

    private async Task CommittedItemChanges(IngredientDto item)
    {
        if (!Block.Id.HasValue)
            return;

        // Cas d'un nouvel item
        if (!item.Id.HasValue)
        {
            item.Order = Block.Ingredients.Select(c => c.Order).DefaultIfEmpty(0).Max() + IngredientService.Step;
            Block.Ingredients.Add(item);
            OnBlockUpdated?.Invoke(Block);
        }
        else
        {
            await RecipeRepository.UpdateIngredient(item);
        }
    }

    private async Task MoveUp(IngredientDto ingredient)
    {
        bool shouldRestabilize = IngredientService.ShouldRestabilize(Block.Ingredients);

        IngredientService.MoveUp(Block.Ingredients, ingredient.Id!.Value);

        if (shouldRestabilize)
            OnBlockUpdated?.Invoke(Block);
        else
            await RecipeRepository.UpdateIngredient(ingredient);
    }

    private async Task MoveDown(IngredientDto ingredient)
    {
        bool shouldRestabilize = IngredientService.ShouldRestabilize(Block.Ingredients);

        IngredientService.MoveDown(Block.Ingredients, ingredient.Id!.Value);

        if (shouldRestabilize)
            OnBlockUpdated?.Invoke(Block);
        else
            await RecipeRepository.UpdateIngredient(ingredient);
    }

}