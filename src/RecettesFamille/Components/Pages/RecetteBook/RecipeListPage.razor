@page "/"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using RecettesFamille.Data.Repository.IRepositories
@using RecettesFamille.Dto.ModelByPage.RecetteBook
@using RecettesFamille.Dto.Models
@using RecettesFamille.Extensions

<MudGrid>
    <MudItem md="3">
        <MudStack>

            <MudPaper>
                <MudText class="mud-list-subheader mud-list-subheader-gutters" Style="font-weight: 500;">Recherche libre</MudText>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Clearable="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mx-5 mb-2"></MudTextField>
            </MudPaper>
            <MudPaper>
                <MudList T="string" SelectionMode="SelectionMode.MultiSelection" Dense="true"
                         SelectedValuesChanged="OnSelectedValuesChanged">
                    <MudListSubheader>
                        Filtre par catégories
                    </MudListSubheader>
                    @foreach (var item in Tags.EmptyIfNull().OrderBy(c => c.TagName))
                    {
                        <MudListItem Dense="true" Text="@item.TagName" />
                    }
                </MudList>
            </MudPaper>

        </MudStack>
    </MudItem>
    <MudItem md="9">

        <MudPaper Elevation="1">
            <MudTable Items="Recipes" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Class="mud-table-extra-dense"
                      Filter="new Func<RecipeForListDto, bool>(FilterFunc1)" Dense="true" Height="calc(100vh - 130px)">
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>
                        @foreach (var item in context.Tags.Split("|", StringSplitOptions.RemoveEmptyEntries))
                        {
                            <MudChip T="string" Variant="Variant.Text" Size="Size.Small" Color="Color.Inherit">@item</MudChip>
                        }
                    </MudTd>
                    <MudTd>
                        <MudIconButton Href="@($"/recette/{context.Id}")" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary" Size="Size.Small" />
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 25, 50, 100, int.MaxValue }"
                                   RowsPerPageString="Elements par page :"
                                   AllItemsText="Tout"
                                   InfoFormat="{first_item}-{last_item} sur {all_items}" />
                </PagerContent>
            </MudTable>
        </MudPaper>

    </MudItem>
</MudGrid>

@code {
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    [Inject] IRecipeRepository RecipeRepository { get; set; } = null!;
    [Inject] ITagRepository TagRepository { get; set; } = null!;

    List<RecipeForListDto> Recipes { get; set; } = null!;
    List<TagDto> Tags { get; set; } = null!;
    string _searchString = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        var result = await RecipeRepository.GetAllLightRecipe();

        Recipes = result.OrderBy(c => c.Name).ToList();
        Tags = await TagRepository.GetAllVisible();
    }

    public async Task OnSelectedValuesChanged(IReadOnlyCollection<string>? strings)
    {
        Recipes = (await RecipeRepository.GetAllLightRecipe(strings!.ToArray())).OrderBy(c => c.Name).ToList();
    }

    private bool FilterFunc1(RecipeForListDto element) => FilterFunc(element, _searchString);

    private static bool FilterFunc(RecipeForListDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        var comparer = $"{element.Name} - {element.Tags}";
        return comparer.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

}