@page "/"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using RecettesFamille.Data.Repository.IRepositories
@using RecettesFamille.Dto.ModelByPage.RecetteBook
@using RecettesFamille.Dto.Models
@using RecettesFamille.Extensions

<MudGrid>
    <MudItem md="3">
        <MudStack Class="mt-15">

            <MudPaper>
                <MudText class="mud-list-subheader mud-list-subheader-gutters" Style="font-weight: 500;">Recherche libre</MudText>
                <MudTextField @bind-Value="_searchString1" Placeholder="Search" Adornment="Adornment.Start" Clearable="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mx-5 mb-2"></MudTextField>
            </MudPaper>
            <MudPaper>
                <MudList T="string" SelectionMode="SelectionMode.MultiSelection" Dense="true"
                         SelectedValuesChanged="OnSelectedValuesChanged">
                    <MudListSubheader>
                        Filtre par catégories
                    </MudListSubheader>
                    @foreach (var item in Tags.EmptyIfNull().OrderBy(c => c.TagName))
                    {
                        <MudListItem Dense="true" Text="@item.TagName" />
                    }
                </MudList>
            </MudPaper>

        </MudStack>
    </MudItem>
    <MudItem md="9">

        <MudToolBar Class="mb-3" Dense="true">
            <MudSpacer />
            <MudToggleGroup T="string" Outlined="true" Delimiters="true" Size="Size.Small" Color="Color.Primary"
                            @bind-Value="_viewMode">
                <MudToggleItem Value="Icons.Material.Filled.GridView">
                    <MudIcon Icon="@Icons.Material.Filled.GridView" />
                </MudToggleItem>
                <MudToggleItem Value="Icons.Material.Filled.List">
                    <MudIcon Icon="@Icons.Material.Filled.List" />
                </MudToggleItem>
            </MudToggleGroup>
        </MudToolBar>

        @switch (_viewMode)
        {
            case Icons.Material.Filled.GridView:
                <MudGrid Spacing="5" Justify="Justify.Center">
                    @foreach (var item in Recipes.EmptyIfNull())
                    {
                        <MudItem xs="12" sm="4" md="3" xl="2">
                            <MudCard Style="height:100%">
                                @* <MudCardMedia Image="images/door.jpg" Height="200" /> *@
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.subtitle2">@item.Name</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    @* <MudText Typo="Typo.body2">@item.InformationPreparation</MudText> *@
                                </MudCardContent>
                                <MudCardActions>
                                    <MudIconButton Href="@($"/recette/{item.Id}")" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Secondary" Size="Size.Small" />
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
                break;
            case Icons.Material.Filled.List:
                <MudPaper Elevation="1">
                    <MudTable Items="Recipes" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Class="mud-table-extra-dense"
                              Filter="new Func<RecipeForListDto,bool>(FilterFunc1)" Dense="true" Height="calc(100vh - 200px)">
                        <RowTemplate>
                            <MudTd>@context.Name</MudTd>
                            <MudTd>
                                @foreach (var item in context.Tags.Split("|"))
                                {
                                    <MudChip T="string" Variant="Variant.Text" Size="Size.Small"
                                             Color="Color.Info">@item</MudChip>
                                }
                            </MudTd>
                            <MudTd>
                                <MudIconButton Href="@($"/recette/{context.Id}")" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Secondary" Size="Size.Small" />
                            </MudTd>
                        </RowTemplate>

                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 25, 50, 100, int.MaxValue }"
                                           RowsPerPageString="Elements par page :"
                                           AllItemsText="Tout"
                                           InfoFormat="{first_item}-{last_item} sur {all_items}" />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
                break;
        }
    </MudItem>
</MudGrid>

@code {
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    [Inject] IRecipeRepository RecipeRepository { get; set; } = null!;
    [Inject] ITagRepository TagRepository { get; set; } = null!;

    List<RecipeForListDto> Recipes { get; set; } = null!;
    List<TagDto> Tags { get; set; } = null!;
    string _viewMode = Icons.Material.Filled.List;
    string _searchString1 = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        var result = await RecipeRepository.GetAllLightRecipe();

        Recipes = result.OrderBy(c => c.Name).ToList();
        Tags = await TagRepository.GetAllVisible();
    }

    public async Task OnSelectedValuesChanged(IReadOnlyCollection<string>? strings)
    {
        Recipes = (await RecipeRepository.GetAllLightRecipe(strings!.ToArray())).OrderBy(c => c.Name).ToList();
    }

    private bool FilterFunc1(RecipeForListDto element) => FilterFunc(element, _searchString1);

    private static bool FilterFunc(RecipeForListDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        var comparer = $"{element.Name} - {element.Tags}";
        return comparer.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

}