@using Cropper.Blazor.Events
@using Cropper.Blazor.Events.CropEvent
@using Cropper.Blazor.Extensions
@using Cropper.Blazor.Models

<MudDialog>
    <TitleContent>
        Rogner l'image
    </TitleContent>
    <DialogContent>
        <MudPaper Height="200">
            <CropperComponent @ref="_cropperComponent" Class="big-img" Src="@ImageSource.ToImageSrc()" OnCropEvent="OnCropEvent" Options="_options" />
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .big-img {
        max-height: 400px;
        /* This rule is very important, please don't ignore this */
        max-width: 100%;
    }
</style>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public byte[] ImageSource { get; set; }

    private CropperComponent? _cropperComponent;
    private CropperData _currentCropperData = null!;

    private readonly Options _options = new()
    {
        AspectRatio = (decimal)4 / 3,
    };


    public async void OnCropEvent(JSEventData<CropEvent> cropJSEvent)
    {
        await InvokeAsync(() =>
        {
            if (cropJSEvent?.Detail is not null)
            {
                _currentCropperData = cropJSEvent.Detail;
            }
        });
    }

    private void Submit()
    {
        try
        {
            var getCroppedCanvasOptions = new GetCroppedCanvasOptions();

            if (_currentCropperData is null)
            {
                return;
            }

            ImageSource = ImageSource.CropImage(_currentCropperData.X, _currentCropperData.Y, _currentCropperData.Width, _currentCropperData.Height);

            MudDialog.Close(DialogResult.Ok(ImageSource));
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}