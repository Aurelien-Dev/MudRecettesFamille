<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />

    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="_content/CodeBeam.MudBlazor.Extensions/MudExtensions.min.css" rel="stylesheet" />
    <link href="_content/MudBlazor.Markdown/MudBlazor.Markdown.min.css" rel="stylesheet" />
    <link href="_content/Cropper.Blazor/cropper.min.css" rel="stylesheet" />

    <link href="site.css" rel="stylesheet" />
    <link rel="icon" type="image/ico" href="favicon.ico" />
    <HeadOutlet @rendermode="RenderModeForPage" />
</head>

<body>
    <Routes @rendermode="RenderModeForPage" />
    <div id="reconnect-modal" style="display: none;"></div>

    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script>
        Blazor.start({
              circuit: {
                  reconnectionOptions: {
                      maxRetries: 6,
                      retryIntervalMilliseconds: (previousAttempts, maxRetries) =>
                              previousAttempts >= maxRetries
                                  ? null
                                  : previousAttempts * 1000
                      },
                  },
          });
    </script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="_content/Extensions.MudBlazor.StaticInput/NavigationObserver.js"></script>
    <script src="_content/CodeBeam.MudBlazor.Extensions/MudExtensions.min.js"></script>
    <script src="_content/MudBlazor.Markdown/MudBlazor.Markdown.min.js"></script>
    <script src="_content/Cropper.Blazor/cropper.min.js"></script>

    <script>
        window.downloadFileFromStream = async (fileName, contentStreamReference) => {
          const arrayBuffer = await contentStreamReference.arrayBuffer();
          const blob = new Blob([arrayBuffer]);
          const url = URL.createObjectURL(blob);
          const anchorElement = document.createElement('a');
          anchorElement.href = url;
          anchorElement.download = fileName ?? '';
          anchorElement.click();
          anchorElement.remove();
          URL.revokeObjectURL(url);
        }
    </script>
</body>

</html>

@code {
    [CascadingParameter]

    private HttpContext HttpContext { get; set; } = default!;



    private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")

        ? null

        : InteractiveServer;
}